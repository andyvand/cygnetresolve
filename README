# netresolve library and tools

Netresolve is a package for nonblocking network name resolution via backends
intended as a replacement for name service switch based name resolution in
glibc.

## Contact

Pavel Å imerda
psimerda at redhat.com
pavlix at pavlix.net (mail and jabber)
pavlix at IRC Freenode

## Core features

 * File descriptor based nonblocking host/service name resolution API
   - suitable for various file descriptor based event loops
   - unlike glibc or POSIX APIs
 * Extensible request and result APIs
   - unlike glibc or POSIX APIs
   - host/service queries (like `getaddrinfo`)
   - SRV record support for host/service queries
   - reverse queries (like `getnameinfo`)
   - DNS style queries (like `res_query` but via backends)
 * Backend-based network name resolution somewhat similar to glibc's nsswitch
   - more flexible than DNS-only libraries
   - with configurable backend options (not available in nsswitch)
   - also supports nsswitch backends (via `libnetresolve_nss.so`)
 * Avoids limitations and bugs found in glibc
   - support for `ifindex` and `scope_id` (problematic in nsswitch)
   - support for TTL information (problematic in nsswitch)
 * DNS happy eyeballs implementation
   - concurent A/AAAA requests
   - quick timeout when there's no answer to one of A/AAAA requests
 * Socket API
   - callback based wrappers over `socket()`, `bind()` and `connect()`
   - the application receives a successfully bound or connected socket
 * TCP happy eyeballs implementation
   - concurrent IPv4/IPv6 connect
   - quick timeout when there's no answer to one of IPv4/IPv6 TCP SYN packets

## Command line tool

The command line tool is useful for testing the netresolve library as well as testing various libraries supported by netresolve including glibc and libunbound.

Forward query:

    netresolve --node localhost

    netresolve --node www.sourceware.org --service http --protocol tcp

Forward query with SRV resolution:

    netresolve --srv --node jabber.org --service xmpp-client --protocol tcp

Reverse query:

    netresolve --address 192.228.79.201

    netresolve --address 2001:503:ba3e::2:30

DNS style query:

    netresolve --type srv --node _xmpp-client._tcp._jabber.com

    netresolve --class ch --type txt --node version.bind

## Library API

Program or library using netresolve has to allocate a netresolve channel (or context) which is then used to perform all the queries. You may want to create multiple channels to have different configurations prepared for use.

    netresolve_t channel = netresolve_open();

Then it's possible to tweak the channel configuration to your liking.

    netresolve_set_protocol(channel, IPPROTO_TCP);
    netresolve_set_dns_srv_lookup(channel, true);

Now you choose whether you want to use blocking or nonblocking mode. Blocking mode is default, nonblocking mode requires a callback that installs and uninstalls file descriptors. In nonblocking mode, it's often useful to set another callback to pick up the results.

    static void watch_fd(netresolve_query_t query, int fd, int events, void *user_data)
    static void on_success(netresolve_query_t query, void *user_data);

    netresolve_set_fd_callbacks(channel, watch_fd, user_data);
    netresolve_set_success_callback(channel, on_success, user_data);

Now you can use the channel to perform your queries.

    netresolve_query_t query = netresolve_query(channel, "www.sourceware.org", "http");

In blocking mode, you can pick up the result immediately or via the success callback. In nonblocking mode, it's more practical to use the callback so that you can catch successfully finished queries as the go.

    size_t count = netresolve_query_get_count(query);

    for (size_t idx = 0; idx < count; idx++) {
        int family;
        const void *address;
        int ifindex;
        int socktype;
        int protocol;
        int port;
        int priority;
        int weight;
        uint32_t ttl;

        netresolve_query_get_node_info(query, 0, &family, &address, &ifindex);
        netresolve_query_get_service_info(query, 0, &family, &address, &ifindex);
        netresolve_query_get_aux_info(query, 0, &family, &address, &ifindex);

        /* do something with the data */
    }

When you're done with query object, you need to free it.

    netresolve_query_free(query);

The same applies to the channel object.

    netresolve_close(channel);

Examples of blocking and nonblocking use can be found in `tests/test-sync.c` and `tests/test-async.c`.

Known issues:

 * The current implementation requires additional features like epoll and timerfd and is thus limited to Linux.
 * Error reporting is virtually absent.

Thread safety notes:

Don't share channel/query objects across threads for now.

Implementation notes:

The current implementation only registers *one* file descriptor with the application. The file descriptor is an *epoll* file descripter and the associated event is allways `POLLIN`. It's used for tracking the file descriptors that are attached to it and can be used with `select()`, `poll()` as well as `epoll()`.

### POSIX-like API

You can use a compatibility API most resembling the POSIX one but still allowing for nonblocking mode. The channel object must be created as usual and you can also tweak its configuration and set up nonblocking mode and callbacks.

An alternative querying function lets you use input arguments as with `getaddrinfo()`.

    struct addrinfo hints = { .ai_family = AF_UNSPEC, .ai_socktype = 0, .ai_protocol = IPPROTO_TCP, .ai_flags = 0 };
    netresolve_query_t query = netresolve_query_addrinfo(channel, "www.sourceware.org", "http", &hints);

And an alternative result function lets you use output arguments as with `getaddrinfo()`.

    struct addrinfo *list;
    uint32_t ttl;
    int status = netresolve_query_addrinfo_done(query, &list, &ttl);

When you free the query object, you still have the result list allocated.

    netresolve_query_free(query);

When you don't need the result object any more, free it.

    netresolve_query_getaddrinfo_free(list);

An alternative `getaddrinfo()` implementation using netresolve in `compat/libc.c` serves as an example of how to use this compatibility API.

## GNU libc nsswitch backend

A backend for glibc nsswitch is provided as `libnss_netresolve.so` that exposes part of netresolve funcionality via the glibc name resolution API. The backend also supports `_nss_*_getaddrinfo()` API proposed by Alexandre Oliva.

## POSIX/GNU libc API replacement

If your program doesn't need the full power of the provided API but you still want to use `netresolve` as your resolver implementation, you can simply link your program to `libnetresolve-libc.so` which overrides selected libc name resolution functions.

Supported functions:

 * `getaddrinfo()`
 * `gethostbyname()`

You can also force a dynamically linked program to use the functions using `LD_PRELOAD`.

    export LD_PRELOAD=/path/to/libnetresolve-libc.so

Environment variables can be used to tweak netresolve configuration. You can for example limit all queries to the IPv4 address family.

    export NETRESOLVE_FORCE_FAMILY=ip4

## Socket API

Support for `socket()`, `bind()` and `connect()` is included. The only thing the application has to do is to register either `on_bind()` or `on_connect()` callback. The resolver is configured with flags suitable for the respective operation. When name resolution is finished, `on_bind()` callback is called for each successfully bound address. The `on_connect()` callback is called once, for the first successfully connected address.

## Tools

The `libnetresolve-libc.so` library together with the `tools/wrapper.sh` script can be used to test any programs calling `getaddrinfo()` and similar.

## Backends

The list of backends can be chosen using `netresolve_set_backend_string()` or via the `NETRESOLVE_BACKENDS` environment variable. Backends are separated by a comma and accept options separated by a colon. A plus sign prepended to the backend name can be used to run that backend even if another backend already succeeded.

    export NETRESOLVE_BACKENDS=any,loopback,numerichost,hosts,hostname,ubdns

The command line interface also supports an option to select the backend.

    netresolve --backend any,loopback,numerichost,hosts,hostname,ubdns

The backends listed in the above comments are those used by default. You need to change the list to actually change the behavior of netresolve.

### General purpose backends

Three backends, `any`, `loopback` and `numerichost`, are available that perform trivial translations. The `hosts` backends uses `/etc/hosts` database of nodes. Nonblocking API is most useful for remote services. We have two nonblocking DNS backends, the default `ubdns` based on libunbound, and an alternative `aresdns` using *c-ares*.

### POSIX and glibc compatibility backends

You can ask `netresolve` to call `getaddrinfo()` to gather the data using the `getaddrinfo` backend. This is useful for testing the libc API as well as comparing results of general purpose netresolve backends to other implementations. This backend blocks until the `getaddrinfo()` function exits.

    netresolve --backends getaddrinfo --node www.sourceware.org

We also support glibc nsswitch modules through the `nss` backend. It finds the nsswitch dynamic module by name, loads the supported API functions and runs the most suitable one. The algorithm used in netresolve was inspired by glibc `getaddrinfo()` and glibc nscd code. This backend blocks until the nsswitch module function exits.

    netresolve --backends nss:files --node localhost

    netresolve --backends nss:dns --node www.sourceware.org

You can also pass the nsswitch module by absolute or relative path.

    netresolve --backends nss:/usr/lib64/libnss_files.so

Or you can select the specific nsswitch API to be used.

    # call `_nss_files_gethostbyname_r`
    netresolve --backends nss:files:gethostbyname --node localhost

    # call `_nss_files_gethostbyname2_r`
    netresolve --backends nss:files:gethostbyname2 --node localhost

    # call `_nss_files_gethostbyname3_r`
    netresolve --backends nss:files:gethostbyname3 --node localhost

    # call `_nss_files_gethostbyname4_r`
    netresolve --backends nss:files:gethostbyname4 --node localhost

You can use the nss plugin to test systemd-resolved via `libnss_resolve.so`.

    netresolve --backends nss:resolve --node localhost

We have experimental support for new nsswitch API based on `getaddrinfo()`
proposed by Alexandre Oliva. This proposed API would consolidate the nsswitch
APIs and overcome some of the limitations describe at the beginning of this
document.

### Auxiliary backends

There's an experimental backend to call a script to perform name resolution
and feed it with the request serialized in a couple of text lines and read
the result from it.

    netresolve --backends exec:/path/to/my/script --node localhost


That one can be used for interactive testing as well:

    netresolve --backends exec:socat:-:/dev/tty --node www.example.com

## Writing a custom backend

When a name resolution request is ready, netresolve calls `setup(resolver, settings)`. Backend's `setup()` implementation then has to do one of the following:

1. Add any data items using `netresolve_backend_add_*()` functions and call `netresolve_backend_finished()` to signal that the name resolution has finished and we don't need to run any other backends.
2. Call `netresolve_backend_failed()` to signal failure.
3. Add one or more file descriptors or timers using `netresolve_backend_watch_fd()` and `netresolve_backend_watch_timeout()`. In that case, the backend must also provide the `dispatch()` function so that the transaction can continue.

Input data is gathered using `netresolve_backend_get_*()` functions. Internal state accross `setup()` and `dispatch()` calls can be kept using `netresolve_backend_new_priv()` and `netresolve_backend_get_data()`. The backend should provide `cleanup()` function to clean up any resources. It's called by netresolve upon success/failure or when the transaction was cancelled by the application.

## Known bugs

The library doesn't currently sort paths according to their priority and/or RFC rules. The c-ares library blocks when /etc/resolv.conf is empty instead of quitting immediately, which in turn breaks tests when offline. The DNS backend doesn't support search domains. For more information, see the `TODO` file. 

## Acknowledgements and inspiration

 * Tore Anderson was the first who discussed name resolution issues with me and especially the reasons to suppress A or AAAA queries when global address of the respective family is not present in the system.
    - [sourceware.org: #12377](https://sourceware.org/bugzilla/show_bug.cgi?id=12377)
 * Simo Sorce told me about `getaddrinfo()` issues with canonical names.
 * Ulrich Drepper wrote a good amount of documentation on network name resolution.
    - [Userlevel IPv6 Programming Introduction](http://www.akkadia.org/drepper/userapi-ipv6.html)
    - [Asynchronous Hostname Lookup API](http://www.akkadia.org/drepper/asynchnl.pdf)
 * Carlos O'Donnel helped me to find my way in the glibc community.
 * Nick Jones brought in the idea of a file descriptor based nonblocking API.
    - [libc-alpha: asynchronous getaddrinfo and getnameinfo](https://sourceware.org/ml/libc-alpha/2013-01/msg00356.html)
    - [fedora-devel: asynchronous name resolution requirements](https://lists.fedoraproject.org/pipermail/devel/2013-January/177290.html)
 * Petr Å paÄek pointed me to SSSD developers.
 * Jakub Hrozek told me about c-ares DNS library and about SSSD name resolution requirements.
    - https://fedorahosted.org/sssd/ticket/2155
 * Miloslav TrmaÄ reminded me of the need to also provide binding and connecting facilities on top of name resolution.
 * Lennart Poettering wrote *libasyncns*, an async wrapper over libc resolver functions
 * Alexandre Oliva wrote a number of proposals to improve glibc name resolution

## Related projects

### glibc

One way to look at netresolve is to see it as a testbed for future glibc improvements. It's written with testing and debugging in mind and prototyping new ideas in netresolve is very easy. Another way is to see it as a more flexible alternative to glibc host and service name resolution functionality. Either way glibc and POSIX were the main inspirations for this project.

### c-ares

They provide `ares_fds()` and `ares_timeout()` to update the current set of file descriptors and the associated timeout. The `netresolve` callback API improves greatly on that. The application submits the `watch_fd()` callback.

### sssd

They provide a backend-based caching service for user/group name resolution, authentication and related stuff. As netresolve doesn't really need to cache its results nor does it need to perform authentication services, it provides just a shared library, not a long-running daemon. Also, for DNS resolution they currently use `c-ares`.

### libevent, squid, etc...

According to the website, libevent is using internal asynchronous DNS as well. The same applies to squid. Apparently the operating system's resolution API is not sufficient for many tools.

### systemd-resolved

To my knowledge, name resolution related systemd features were announced after I published netresolve. The relation to that project is yet to be seen.

## License

Copyright (c) 2013 Pavel Å imerda, Red Hat, Inc. (psimerda at redhat.com) and others
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
