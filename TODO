# TODO list

## Core library

 * Improve path ordering
    - use rules from http://tools.ietf.org/html/rfc6724
    - use /etc/gai.conf
 * Improve socket API and happy eyeballs
    - support TCP application layer happy eyeballs
    - support UDP happy eyeballs
 * Add DNSSEC validation information
    - what about non-DNS protocols?
    - what about any, localhost or numeric addresses
 * Consider using -fvisibility=hidden
 * Consider using a separete libnetresolve-backend.so
 * Allow backend list setting at any time or at least check whether they can be changed
 * Make /etc/services reading thread safe
 * Read a configuration file in addition to environment variables

## Tools, wrappers and tests

 * Consider extending `libnetresolve-libc.so` with more functions
    - `getaddrinfo_a()`, `gai_suspend()`, `gai_error()` and `gai_cancel()` (glibc specific)
 * Implement wrappers over netresolve for notable event loops or event connectors
    - GLib main loop
    - libevent
    - libverto
    - Python PEP 3156
    - and more...
 * Build a fake ares/libunbound library to support DNS testing
 * A comprehensive dualstack test plan
    - DNS: AAAA wildcard search available, only global A record set
    - DNS: AAAA record not answered, A answered (and vice versa)
    - DNS: SRV not answered, A/AAAA answered
    - TCP: IPv6/SYN not answered, IPv4 SYN answered (and vice versa)
    - TCP: first IPv6/SYN not answered, second IPv6/SYN answered (the same for IPv4)
    - TCP: IPv6-only destination, first address not answered, next address works
    - TCP: first SYN answered, application layer failure, next address works
    - UDP: application layer failure, next address works

## Backends

 * Improve the DNS backends (mainly libunbound)
    - consider domain search support
    - validation information
    - `ai_addrconfig`-like functionality
 * Implement a nonblocking multicast DNS backend
 * Improve `nss` backend
    - support reverse queries
    - consider supporting hostent listing
 * Improve `exec` backend
    - make sure it send all request attributes and accepts all response attributes
    - add tests
 * Implement `hostname` backend
 * Provide more backends
    - POSIX resolver routines
    - asyncns
    - getdns
    - multicast DNS

## Portability

 * Support non-epoll platforms
    - by passing multiple file descriptors to application using `watch_fd()` calls
    - emulate timerfd file descriptors and/or pass a timeout to the application

## Documentation and non-development stuff

 * Website
 * Manpages
 * Provide fixes for glibc resolver
 * IETF notes, errata and drafts
